name: GKI Kernel Build with LXC/Docker supported

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: >
          Output directory of gki,
          for example: android12-5.10
      version_name:
        required: true
        type: string
        description: >
          With SUBLEVEL of kernel,
          for example: android12-5.10.66
      tag:
        required: true
        type: string
        description: >
          Part of branch name of common kernel manifest,
          for example: android12-5.10-2021-11
      os_patch_level:
        required: false
        type: string
        description: >
          Patch level of common kernel manifest,
          for example: 2021-11
        default: 2022-05
      patch_path:
        required: false
        type: string
        description: >
          Directory name of .github/patches/<patch_path>
          for example: 5.10
      use_cache:
        required: false
        type: boolean
        default: true
      embed_ksud:
        required: false
        type: string
        default: ksud-aarch64-linux-android
        description: >
          Artifact name of prebuilt ksud to be embedded
          for example: ksud-aarch64-linux-android
      debug:
        required: false
        type: boolean
        default: false
      build_lkm:
        required: false
        type: boolean
        default: false
      enable_lxc_docker:
        required: false
        type: boolean
        default: true
    secrets:
      BOOT_SIGN_KEY:
        required: false
      CHAT_ID:
        required: false
      BOT_TOKEN:
        required: false
      MESSAGE_THREAD_ID:
        required: false

jobs:
  build:
    name: Build ${{ inputs.version_name }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup need_upload
        id: need_upload
        run: |
          if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
            echo "UPLOAD=true" >> $GITHUB_OUTPUT
          else
            echo "UPLOAD=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup kernel source
        run: |
          echo "Free space before setup:"
          df -h
          cd $GITHUB_WORKSPACE
          sudo apt-get update
          sudo apt-get install -y repo
          mkdir android-kernel && cd android-kernel
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ inputs.tag }})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if echo "$REMOTE_BRANCH" | grep -q deprecated; then
            echo "Found deprecated branch: ${{ inputs.tag }}"
            sed -i "s/${{ inputs.tag }}/deprecated\/${{ inputs.tag }}/g" $DEFAULT_MANIFEST_PATH
            cat $DEFAULT_MANIFEST_PATH
          fi
          repo --version
          repo --trace sync -c -j$(nproc --all) --no-tags
          echo "Free space after setup:"
          df -h

      - name: Setup KernelSU
        env:
          PATCH_PATH: ${{ inputs.patch_path }}
          IS_DEBUG_KERNEL: ${{ inputs.debug }}
        run: |
          cd $GITHUB_WORKSPACE/android-kernel
          echo "[+] KernelSU setup"
          GKI_ROOT=$(pwd)
          echo "[+] GKI_ROOT: $GKI_ROOT"
          echo "[+] Copy KernelSU driver to $GKI_ROOT/common/drivers"
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $GKI_ROOT/common/drivers/kernelsu
          echo "[+] Add KernelSU driver to Makefile"
          DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
          DRIVER_KCONFIG=$GKI_ROOT/common/drivers/Kconfig
          grep -q "kernelsu" "$DRIVER_MAKEFILE" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> "$DRIVER_MAKEFILE"
          grep -q "kernelsu" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\\source \"drivers/kernelsu/Kconfig\"" "$DRIVER_KCONFIG"
          echo "[+] Apply KernelSU patches"
          cd $GKI_ROOT/common/ && git apply $GITHUB_WORKSPACE/KernelSU/.github/patches/$PATCH_PATH/*.patch || echo "[-] No patch found"

          if [ "$IS_DEBUG_KERNEL" = "true" ]; then
            echo "[+] Enable debug features for kernel"
            printf "\nccflags-y += -DCONFIG_KSU_DEBUG\n" >> $GITHUB_WORKSPACE/KernelSU/kernel/Makefile
          fi
          repo status
          echo "[+] KernelSU setup done."

      - name: Symbol magic
        run: |
          echo "[+] Export all symbols from abi_gki_aarch64.xml"
          COMMON_ROOT=$GITHUB_WORKSPACE/android-kernel/common
          KSU_ROOT=$GITHUB_WORKSPACE/KernelSU
          ABI_XML=$COMMON_ROOT/android/abi_gki_aarch64.xml
          SYMBOL_LIST=$COMMON_ROOT/android/abi_gki_aarch64
          # python3 $KSU_ROOT/scripts/abi_gki_all.py $ABI_XML > $SYMBOL_LIST
          echo "[+] Add KernelSU symbols"
          cat $KSU_ROOT/kernel/export_symbol.txt | awk '{sub("[ \t]+","");print "  "$0}' >> $SYMBOL_LIST

      - name: Setup ccache
        if: inputs.use_cache == true
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: gki-kernel-aarch64-${{ inputs.version_name }}
          max-size: 2G
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Setup for LKM
        if: ${{ inputs.build_lkm == true }}
        working-directory: android-kernel
        run: |
          pip install ast-grep-cli
          sudo apt-get install -y llvm-15
          ast-grep -U -p '$$$ check_exports($$$) {$$$}' -r '' common/scripts/mod/modpost.c
          ast-grep -U -p 'check_exports($$$);' -r '' common/scripts/mod/modpost.c
          sed -i '/config KSU/,/help/{s/default y/default m/}' common/drivers/kernelsu/Kconfig
          echo "drivers/kernelsu/kernelsu.ko" >> common/android/gki_aarch64_modules

          # bazel build, android14-5.15, android14-6.1 use bazel
          if [ ! -e build/build.sh ]; then
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
            if [ -e common/modules.bzl ]; then
              sed -i 's/_COMMON_GKI_MODULES_LIST = \[/_COMMON_GKI_MODULES_LIST = \[ "drivers\/kernelsu\/kernelsu.ko",/g' common/modules.bzl
            fi
          else
            TARGET_FILE="build/kernel/build.sh"
            if [ ! -e "$TARGET_FILE" ]; then
              TARGET_FILE="build/build.sh"
            fi
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' $TARGET_FILE || echo "No unknown symbol in $TARGET_FILE"
            sed -i 's/if ! diff -u "\${KERNEL_DIR}\/\${MODULES_ORDER}" "\${OUT_DIR}\/modules\.order"; then/if false; then/g' $TARGET_FILE
            sed -i 's@${ROOT_DIR}/build/abi/compare_to_symbol_list@echo@g' $TARGET_FILE
            sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
          fi

      - name: Make working directory clean to avoid dirty
        working-directory: android-kernel
        run: |
          rm common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          git config --global user.email "bot@kernelsu.org"
          git config --global user.name "KernelSUBot"
          cd common/ && git add -A && git commit -a -m "Add KernelSU" || echo "No changes to commit"
          repo status

      - name: Build Kernel/LKM
        working-directory: android-kernel
        run: |
          # Setup for LXC/Docker configurations if enabled
          cd common
          # Ensure .config exists or create a default one
          if [ ! -f ".config" ]; then
            make gki_defconfig
            echo "[+] Generated gki_defconfig"
          fi

          # Define the path to the config fragment
          CONFIG_FRAGMENT=$GITHUB_WORKSPACE/KernelSU/.github/configs/lxc_docker.config

          # Check if LXC/Docker support is enabled
          if [ "${{ inputs.enable_lxc_docker }}" = "true" ]; then
            # Verify that the config fragment exists
            if [ ! -f "$CONFIG_FRAGMENT" ]; then
              echo "[-] Configuration fragment not found at $CONFIG_FRAGMENT"
              exit 1
            fi

            echo "[+] Setting LXC/Docker configurations using scripts/config"
            # 使用 scripts/config 工具逐个设置配置项，确保依赖关系被正确处理
            while read -r line; do
              # 忽略空行和注释
              [[ -z "$line" || "$line" =~ ^# ]] && continue
              key=$(echo "$line" | cut -d '=' -f1)
              value=$(echo "$line" | cut -d '=' -f2)
              if [ "$value" = "y" ]; then
                ./scripts/config --enable "$key"
              elif [ "$value" = "m" ]; then
                ./scripts/config --module "$key"
              elif [ "$value" = "n" ]; then
                ./scripts/config --disable "$key"
              fi
            done < "$CONFIG_FRAGMENT"

            # 重新生成依赖关系
            make olddefconfig

            # Debug: 显示合并配置后的 .config 文件的
           echo "[+] LXC/Docker related configurations in .config:"
           grep -f "$CONFIG_FRAGMENT" .config || echo "[-] Failed to grep configurations"

            # Debug: 验证必要的配置项是否被正确设置为 y
            REQUIRED_CONFIGS=(
              CONFIG_CGROUPS
              CONFIG_NAMESPACES 
              CONFIG_NET_NS
              CONFIG_UTS_NS
              CONFIG_OVERLAY_FS
              CONFIG_DEVTMPFS
              CONFIG_DEVTMPFS_MOUNT
              CONFIG_TMPFS
              CONFIG_CGROUP_CPUACCT
              CONFIG_CGROUP_FREEZER
              CONFIG_CGROUP_SCHED
              CONFIG_CPUSETS
              CONFIG_MEMCG
              CONFIG_KEYS
              CONFIG_VETH
              CONFIG_BRIDGE
              CONFIG_INET
              CONFIG_NET
              CONFIG_NETFILTER
              CONFIG_NETFILTER_ADVANCED
              CONFIG_BRIDGE_NETFILTER
              CONFIG_BRIDGE_VLAN_FILTERING
              CONFIG_IP_NF_FILTER
              CONFIG_IP_NF_MANGLE
              CONFIG_IP_NF_TARGET_MASQUERADE
              CONFIG_IP_NF_NAT
              CONFIG_NF_NAT
              CONFIG_CGROUP_BPF
              CONFIG_SECCOMP
              CONFIG_SECCOMP_FILTER
              CONFIG_MEMCG_SWAP
              CONFIG_BLK_CGROUP
              CONFIG_CGROUP_NET_PRIO
              CONFIG_FAIR_GROUP_SCHED
              CONFIG_IP_NF_TARGET_REDIRECT
              CONFIG_SECURITY_SELINUX
              CONFIG_EXT4_FS
              CONFIG_EXT4_FS_POSIX_ACL
              CONFIG_EXT4_FS_SECURITY
              CONFIG_CRYPTO
              CONFIG_CRYPTO_AEAD
              CONFIG_CRYPTO_GCM
              CONFIG_CRYPTO_SEQIV
              CONFIG_CRYPTO_GHASH
              CONFIG_XFRM
              CONFIG_XFRM_USER
              CONFIG_XFRM_ALGO
              CONFIG_INET_ESP
              CONFIG_NETFILTER_XT_MATCH_BPF
              CONFIG_VXLAN
              CONFIG_IPVLAN
              CONFIG_MACVLAN
              CONFIG_DUMMY
              CONFIG_NF_NAT_FTP
              CONFIG_NF_CONNTRACK_FTP
              CONFIG_NF_NAT_TFTP
              CONFIG_NF_CONNTRACK_TFTP
              CONFIG_BTRFS_FS
              CONFIG_BTRFS_FS_POSIX_ACL
              CONFIG_HUGETLB_PAGE
              CONFIG_CGROUP_HUGETLB
              CONFIG_IPV6
            )

            # 验证所有必需的配置项是否已正确设置
            for config in "${REQUIRED_CONFIGS[@]}"; do
              if grep -q "^${config}=[ym]" .config; then
                echo "[+] ${config} is set correctly"
              else
                echo "[-] ${config} is not set correctly"
                if [ "${{ inputs.continue_on_config_error }}" != "true" ]; then
                  exit 1
                fi
              fi
            done
          fi

          # 确保所有新的配置项被设置，并且现有的配置项没有被更改
          make olddefconfig

          # 保存修改后的 .config 为 defconfig
          make savedefconfig
          if [ -f "defconfig" ]; then
            echo "[+] Generated defconfig successfully"
          else
            echo "[!] Failed to generate defconfig"
            exit 1
          fi
          echo "[+] Saved modified .config as defconfig"

          # 不要将 defconfig 移动到 gki_defconfig 以避免不匹配
          # mv defconfig arch/arm64/configs/gki_defconfig

          make mrproper

          cd ..

          # 继续构建，不修改 gki_defconfig
          if [ ! -z "${{ vars.EXPECTED_SIZE }}" ] && [ ! -z "${{ vars.EXPECTED_HASH }}" ]; then
            export KSU_EXPECTED_SIZE=${{ vars.EXPECTED_SIZE }}
            export KSU_EXPECTED_HASH=${{ vars.EXPECTED_HASH }}
          fi
          if [ -e build/build.sh ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --config=stamp --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
          fi

          # 构建后清理
          cd common/
          make clean
          cd ..


      - name: Prepare artifacts
        id: prepareArtifacts
        run: |
          OUTDIR=android-kernel/out/${{ inputs.version }}/dist
          if [ ! -e "$OUTDIR" ]; then
            OUTDIR=android-kernel/dist
          fi
          mkdir -p output
          if [ "${{ inputs.build_lkm }}" = "true" ]; then 
            llvm-strip-15 -d "$OUTDIR/kernelsu.ko"
            mv "$OUTDIR/kernelsu.ko" ./output/${{ inputs.version }}_kernelsu.ko
          else
            cp "$OUTDIR/Image" ./output/
            cp "$OUTDIR/Image.lz4" ./output/
            git clone https://github.com/Kernel-SU/AnyKernel3
            rm -rf ./AnyKernel3/.git
            cp "$OUTDIR/Image" ./AnyKernel3/
          fi

      - name: Upload Image and Image.gz
        uses: actions/upload-artifact@v4
        if: ${{ inputs.build_lkm == false }}
        with:
          name: Image-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: ./output/*

      - name: Upload AnyKernel3
        if: ${{ inputs.build_lkm == false }}
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ inputs.version_name }}_${{ inputs.os_patch_level }}
          path: ./AnyKernel3/*

      - name: Upload LKM
        uses: actions/upload-artifact@v4
        if: ${{ inputs.build_lkm == true }}
        with:
          name: ${{ inputs.version }}-lkm
          path: ./output/*_kernelsu.ko
