name: GKI Kernel Build with LXC/Docker Support

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      os_patch_level:
        required: false
        type: string
        default: 2022-05
      patch_path:
        required: false
        type: string
      use_cache:
        required: false
        type: boolean
        default: true
      embed_ksud:
        required: false
        type: string
        default: ksud-aarch64-linux-android
      debug:
        required: false
        type: boolean
        default: false
      enable_lxc_docker:
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ inputs.version_name }} with LXC/Docker Support
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update && sudo apt-get install -y bc bison flex libssl-dev make gcc git zip wget python3 curl unzip kmod cpio xz-utils libncurses5-dev libelf-dev libudev-dev libpci-dev libiberty-dev device-tree-compiler pahole dwarves

      - name: Setup for LXC/Docker
        if: ${{ inputs.enable_lxc_docker == true }}
        run: |
          cd $GITHUB_WORKSPACE/android-kernel/common
          echo "[+] Applying LXC/Docker patches"
          git apply $GITHUB_WORKSPACE/patches/lxc-docker/*.patch || echo "[-] No LXC/Docker patches found"

          echo "[+] Enable LXC/Docker kernel configurations"
          # Ensure necessary kernel configurations are enabled
          sed -i '/CONFIG_LXC=y/d' .config
          sed -i '/CONFIG_CGROUP_PIDS=y/d' .config
          sed -i '/CONFIG_USER_NS=y/d' .config
          sed -i '/CONFIG_IPC_NS=y/d' .config
          sed -i '/CONFIG_PID_NS=y/d' .config
          sed -i '/CONFIG_NET_NS=y/d' .config
          sed -i '/CONFIG_BPF_SYSCALL=y/d' .config
          sed -i '/CONFIG_SECCOMP=y/d' .config
          sed -i '/CONFIG_APPARMOR=y/d' .config
          sed -i '/CONFIG_SECURITY_APPARMOR=y/d' .config
          sed -i '/CONFIG_SECURITY_SELINUX=y/d' .config
          sed -i '/CONFIG_OVERLAY_FS=y/d' .config
          sed -i '/CONFIG_DEVTMPFS=y/d' .config
          sed -i '/CONFIG_DEVTMPFS_MOUNT=y/d' .config
          echo 'CONFIG_LXC=y' >> .config
          echo 'CONFIG_CGROUP_PIDS=y' >> .config
          echo 'CONFIG_USER_NS=y' >> .config
          echo 'CONFIG_IPC_NS=y' >> .config
          echo 'CONFIG_PID_NS=y' >> .config
          echo 'CONFIG_NET_NS=y' >> .config
          echo 'CONFIG_BPF_SYSCALL=y' >> .config
          echo 'CONFIG_SECCOMP=y' >> .config
          echo 'CONFIG_APPARMOR=y' >> .config
          echo 'CONFIG_SECURITY_APPARMOR=y' >> .config
          echo 'CONFIG_SECURITY_SELINUX=y' >> .config
          echo 'CONFIG_OVERLAY_FS=y' >> .config
          echo 'CONFIG_DEVTMPFS=y' >> .config
          echo 'CONFIG_DEVTMPFS_MOUNT=y' >> .config
          make olddefconfig

      - name: Compile kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          make -j$(nproc) Image.gz dtbs modules

      - name: Prepare artifacts
        run: |
          mkdir -p out
          cp arch/arm64/boot/Image.gz out/
          find . -name "*.dtb" -exec cat {} + > out/Image.gz-dtb
          make modules_install INSTALL_MOD_PATH=out
          tar czf modules.tar.gz -C out/lib/modules .

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kernel-build
          path: out/
