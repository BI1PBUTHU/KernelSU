name: GKI Kernel Build with LXC and Kali NetHunter

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      version_name:
        required: true
        type: string
      tag:
        required: true
        type: string
      patch_path:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      arch:
        required: true
        type: string
      kernel_config:
        required: true
        type: string
      add_kprobes_config:
        required: true
        type: boolean
      add_overlayfs_config:
        required: true
        type: boolean
      disable_lto:
        required: true
        type: boolean
      disable_cc_werror:
        required: true
        type: boolean
      disable_fst:
        required: true
        type: boolean
      enable_lxc:
        required: true
        type: boolean
      enable_nethunter:
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      VERSION: ${{ inputs.version }}
      VERSION_NAME: ${{ inputs.version_name }}
      TAG: ${{ inputs.tag }}
      PATCH_PATH: ${{ inputs.patch_path }}
      OS_PATCH_LEVEL: ${{ inputs.os_patch_level }}
      ARCH: ${{ inputs.arch }}
      KERNEL_CONFIG: ${{ inputs.kernel_config }}
      ADD_KPROBES_CONFIG: ${{ inputs.add_kprobes_config }}
      ADD_OVERLAYFS_CONFIG: ${{ inputs.add_overlayfs_config }}
      DISABLE_LTO: ${{ inputs.disable_lto }}
      DISABLE_CC_WERROR: ${{ inputs.disable_cc_werror }}
      DISABLE_FST: ${{ inputs.disable_fst }}
      ENABLE_LXC: ${{ inputs.enable_lxc }}
      ENABLE_NETHUNTER: ${{ inputs.enable_nethunter }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "VERSION=$VERSION"
          echo "VERSION_NAME=$VERSION_NAME"
          echo "TAG=$TAG"
          echo "PATCH_PATH=$PATCH_PATH"
          echo "OS_PATCH_LEVEL=$OS_PATCH_LEVEL"
          echo "ARCH=$ARCH"
          echo "KERNEL_CONFIG=$KERNEL_CONFIG"
          echo "ADD_KPROBES_CONFIG=$ADD_KPROBES_CONFIG"
          echo "ADD_OVERLAYFS_CONFIG=$ADD_OVERLAYFS_CONFIG"
          echo "DISABLE_LTO=$DISABLE_LTO"
          echo "DISABLE_CC_WERROR=$DISABLE_CC_WERROR"
          echo "DISABLE_FST=$DISABLE_FST"
          echo "ENABLE_LXC=$ENABLE_LXC"
          echo "ENABLE_NETHUNTER=$ENABLE_NETHUNTER"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget unzip bzip2 cpio rsync make bc flex libssl-dev zlib1g-dev gcc g++ binutils clang llvm libc6-dev libncurses5-dev xz-utils libelf-dev liblzma-dev libudev-dev device-tree-compiler u-boot-tools python3-distutils uuid-dev dwarves kmod ccache

      - name: Clone KernelSU
        run: |
          git clone https://github.com/tomxi1997/KernelSU.git
          cd KernelSU
          git checkout v1.5.0

      - name: Initialize and sync Android kernel source
        run: |
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10
          repo sync -j$(nproc)

      - name: Setup KernelSU drivers and patches
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          cp -r $GITHUB_WORKSPACE/KernelSU/drivers .
          cp -r $GITHUB_WORKSPACE/KernelSU/fs/fuse/kernelspace fuse/
          cp -r $GITHUB_WORKSPACE/KernelSU/net/netfilter xt_qtaguid.c net/netfilter/

      - name: Handle symbol exports
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          scripts/export-symbol-version.sh

      - name: Setup cache
        if: ${{ env.CACHE_ENABLED }}
        run: |
          export CC=gcc
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export KBUILD_BUILD_USER=GitHubActions
          export KBUILD_BUILD_HOST=github.com
          export LLVM=1
          export USE_CCACHE=1
          export CCACHE_DIR=/tmp/ccache
          export CCACHE_EXEC=$(which ccache)
          ccache --zero-stats

      - name: Build LKM (Loadable Kernel Modules)
        if: ${{ env.BUILD_LKM }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          make -j$(nproc) M=drivers/ksu modules

      - name: Clean workspace
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          make clean

      - name: Build kernel using traditional script
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          make O=out ARCH=$ARCH SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- KCFLAGS=-mno-outline-atomics V=1 -j$(nproc) $KERNEL_CONFIG
          make O=out ARCH=$ARCH SUBARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- KCFLAGS=-mno-outline-atomics V=1 -j$(nproc) Image.gz

      - name: Setup Configuration for Kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          if [ "$ADD_KPROBES_CONFIG" = true ]; then
              echo "CONFIG_MODULES=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
              echo "CONFIG_KPROBES=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
              echo "CONFIG_HAVE_KPROBES=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
              echo "CONFIG_KPROBE_EVENTS=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
          fi
          if [ "$ADD_OVERLAYFS_CONFIG" = true ]; then
              echo "CONFIG_OVERLAY_FS=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
          fi
          if [ "$DISABLE_LTO" = true ]; then
              sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/$ARCH/configs/$KERNEL_CONFIG
              sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/$ARCH/configs/$KERNEL_CONFIG
              sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/$ARCH/configs/$KERNEL_CONFIG
              echo "CONFIG_LTO_NONE=y" >> arch/$ARCH/configs/$KERNEL_CONFIG
          fi
          if [ "$DISABLE_CC_WERROR" = true ]; then
              echo "CONFIG_CC_WERROR=n" >> arch/$ARCH/configs/$KERNEL_CONFIG
          fi
          if [ "$DISABLE_FST" = true ]; then
              sed -i "s/CONFIG_CC_STACKPROTECTOR_STRONG=y/# CONFIG_CC_STACKPROTECTOR_STRONG is not set/g" arch/$ARCH/configs/$KERNEL_CONFIG
          fi

      - name: Setup LXC
        if: env.ENABLE_LXC == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          rm -rf utils
          git clone https://github.com/tomxi1997/lxc-docker-support-for-android.git utils
          echo 'source "utils/Kconfig"' >> "Kconfig"

          echo "CONFIG_DOCKER=y" >> arch/$ARCH/configs/$KERNEL_CONFIG

          sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' arch/$ARCH/configs/$KERNEL_CONFIG
          echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> arch/$ARCH/configs/$KERNEL_CONFIG

          chmod +x $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/runcpatch.sh
          if [ -f $GITHUB_WORKSPACE/kernel_workspace/android-kernel/kernel/cgroup/cgroup.c ]; then
              sh $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/runcpatch.sh $GITHUB_WORKSPACE/kernel_workspace/android-kernel/kernel/cgroup/cgroup.c
          fi

          if [ -f $GITHUB_WORKSPACE/kernel_workspace/android-kernel/net/netfilter/xt_qtaguid.c ]; then
              patch -p0 < $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/xt_qtaguid.patch
          fi

      - name: Setup Kali-Nethunter
        if: env.ENABLE_NETHUNTER == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          git clone https://github.com/tomxi1997/kali-nethunter_patches.git
          patch -p1 < kali-nethunter_patches/add-rtl88xxau-5.6.4.2-drivers.patch
          patch -p1 < kali-nethunter_patches/add-wifi-injection-4.14.patch
          #patch -p1 < kali-nethunter_patches/add-wifi-injection.patch
          patch -p1 < kali-nethunter_patches/fix-ath9k-naming-conflict.patch
          sleep 8
          git clone https://github.com/Biohazardousrom/Kali-defconfig-checker.git kali
          cd kali
          chmod +x *.sh
          chmod +x check-kernel-config
          ./check-kernel-config $GITHUB_WORKSPACE/kernel_workspace/android-kernel/arch/$ARCH/configs/$KERNEL_CONFIG -w

      - name: Build final kernel image
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/out
          make -j$(nproc) Image.gz

      - name: Run post-build script
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          bash $GITHUB_WORKSPACE/build-a12-lxc.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-images
          path: |
            $GITHUB_WORKSPACE/kernel_workspace/android-kernel/*.gz
